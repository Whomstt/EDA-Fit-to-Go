services:
  nextjs-app:
    container_name: fit-to-go-nextjs-app
    build:
      context: ./nextjs-frontend
      target: dev
      dockerfile: Dockerfile
    volumes:
      - ./nextjs-frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - spring-app
    networks:
      - app-network
  spring-app:
    container_name: fit-to-go-spring-app
    build:
      context: ./spring-backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./spring-backend:/app
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - app-network
  postgres-db:
    container_name: fit-to-go-postgres-db
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
  zookeeper:
    container_name: fit-to-go-zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:latest
    container_name: fit-to-go-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - app-network

    
networks:
  app-network:
    driver: bridge
volumes:
  postgres-data: